// 享元模式是一种用于性能优化的模式
// 核心:运用共享技术来有效支持大量细粒度的对象

// 例子:加入有50套男士衣服和50套女士衣服,需要塑料模特穿上进行拍照
// 那么我们如果创建50个男模特和50个女模特来进行拍照,这样的代价很大
// 但是我们可以只创建一个男模特和一个女模特,对他们进行换装即可,这样减少对象的创建,将
// 可重用的最小部分提取出来作为享元对象,其他的动态地附加给享元对象即可
// 这便是享元模式的雏形 这里我们可以感觉到这种模式就是**时间换空间**

// 享元模式要求将对象的属性划分为内部状态和外部状态(状态通常指属性)
// 享元模式的目标是尽量减少共享对象的数量

// 内部状态和外部状态的划分:
//  内部状态存储于对象内部
//  内部状态可以被一些对象共享
//  内部状态独立于具体的场景,通常不会改变
//  外部状态取决与具体的场景,并根据场景而变化,外部状态不能被共享
